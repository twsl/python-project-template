name: Copier Template Update

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
{% if 'road-runner' in github_runner %}{% set github_runner = [github_runner_onprem] %}{% endif %}{% raw %}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true{% endraw %}

jobs:
  copier-update:
    runs-on: {{ github_runner }}
    permissions:
      contents: write
      pull-requests: write
      actions: write
    strategy:
      matrix:
        python-version: [{{ python_version }}] # single version deployment
      fail-fast: true{% if github_rate_limit %}
      max-parallel: 1 # try to to avoid rate limiting{% endif %}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        {% raw %}with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}{% endraw %}

      {% raw %}- name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}{% endraw %}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv

      - name: Add poetry to path
        run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH

      - name: Set up cache
        uses: actions/cache@v4
        id: cached-poetry-dependencies
        {% raw %}with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: venv-${{ runner.os }}-${{ matrix.python-version }}-{% endraw %}

      - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --all-extras

      - name: Run copier update
        id: run-update
        run: poetry run copier update --trust -A --vcs-ref=HEAD

      {% raw %}- name: Resolve conflicts with incoming changes
        run: |
          if [[ -n "$(git status --porcelain | grep '^UU')" ]]; then
            git diff --name-only --diff-filter=U | while read file; do
              awk '
                BEGIN { inConflict=0 }
                /^<<<<<<< /     { inConflict=1; next }
                /^=======/      { if (inConflict) { inConflict=2; next } }
                /^>>>>>>> /     { if (inConflict) { inConflict=0; next } }
                { if (!inConflict) print; else if (inConflict==2) print }
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
              git add "$file"
            done
            git diff --name-only --diff-filter=U | xargs git add
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract commit from copier answers
        id: copier-commit
        run: |
          COMMIT=$(grep '^_commit:' .copier-answers.yml | sed 's/_commit: //')
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "COPIER_COMMIT=$COMMIT" >> $GITHUB_ENV

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        continue-on-error: true
        if: steps.check_changes.outputs.has_changes == 'true'

      - name: Create or update PR
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore: update files via copier"
          branch: copier/update
          title: "Automated copier template update to ${{ steps.copier-commit.outputs.commit }}"
          body: "This PR updates files via copier. In case of conflicts, the PR will always reflect the latest copier output."
          delete-branch: true
          labels: "dependencies"
          token: ${{ secrets.PAT }}{% endraw %}
