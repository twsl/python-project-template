---
name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

{% if repository_provider == 'github.com' %}{% set action_version = 4 %}{% else %}{% set action_version = 3 %}{% endif%}
{% if 'road-runner' in github_runner %}{% set github_runner = github_runner + [github_runner_onprem] %}{% endif %}{% raw %}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
{% endraw %}

jobs:
  build-and-test:
    name: Build and Test
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    strategy:
      fail-fast: true{% if github_rate_limit %}
      max-parallel: 1 # try to to avoid rate limiting{% endif %}
      matrix:
        python-version: {{ github_runner_python_version }}
    runs-on: {{ github_runner }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      {% raw %}- name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
#          cache: 'poetry'{% endraw %}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Add poetry to path
        run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH

      - name: Set up cache
        uses: actions/cache@v4
        id: cached-poetry-dependencies
        {% raw %}with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}{% endraw %}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Install plugin
        run: poetry add --group test pytest-github-actions-annotate-failures

      - name: Build dependencies
        run: poetry build

      - name: Upload dist
        uses: actions/upload-artifact@v3
        {% raw %}with:
          name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ matrix.python-version }}-${{ github.sha }}
          path: dist/
        if: ${{ always() }}{% endraw %}

      - name: Run ruff
        run: poetry run ruff check -v ./

#      - name: Run Pyright
#        uses: jakebailey/pyright-action@v2

      - name: Run safety checks
        run: |
          poetry check
          poetry run bandit -ll --recursive hooks
        continue-on-error: true

      - name: Run tests
        {% raw %}run: |
          poetry run pytest -c pyproject.toml --cov-report=xml --cov-report=html \
          --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}.xml \
          --cov=${{ github.event.repository.name }}{% endraw %}

      - name: Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: "markdown"
          output: "both"
        {% raw %}if: ${{ always() }}{% endraw %}

      - name: Upload test coverage
        uses: actions/upload-artifact@v{{ action_version }}{% if repository_provider != 'github.com' %}  # cant update yet on GHES{% endif %}
        {% raw %}with:
          name: pytest-coverage-${{ runner.os }}-${{ matrix.python-version }}
          path: code-coverage-results.md
        if: ${{ always() }}{% endraw %}

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        {% raw %}with:
          header: Code Coverage ${{ runner.os }} ${{ matrix.python-version }}
          path: code-coverage-results.md
        if: ${{ always() && github.event_name == 'pull_request' && github.event.workflow_run.conclusion != 'skipped' }}{% endraw %}

      - name: Upload test results
        uses: actions/upload-artifact@v{{ action_version }}{% if repository_provider != 'github.com' %}  # cant update yet on GHES{% endif %}
        {% raw %}with:
          name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}{% endraw %}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        {% raw %}with:
          files: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}.xml
        if: ${{ always() && github.event_name == 'pull_request' && github.event.workflow_run.conclusion != 'skipped' }}{% endraw %}
